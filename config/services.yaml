# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: es_GT
    app_name: "%env(APP_NAME)%"
    dev_name: "%env(DEVELOPER_NAME)%"
    uploads_base_url: 'https://s3.amazonaws.com/%env(AWS_S3_BUCKET_NAME)%'
    fb_client_id: "%env(APP_FB_CLIENT_ID)%"
    fb_client_secret: "%env(APP_FB_SECRET)%"

services:
    # Default configuration for services in *this* file
    _defaults:
        # Automatically injects dependencies in your services
        autowire: true

        # Automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true

        # Allows optimizing the container by removing unused services; this also means
        # fetching services directly from the container via $container->get() won't work
        public: false

        # setup special, global autowiring rules
        bind:
            $isDebug: '%kernel.debug%'
            $env: '%kernel.environment%'
            $uploadsFilesystem: '@oneup_flysystem.uploads_filesystem_filesystem'
            $uploadedAssetsBaseUrl: '%uploads_base_url%'
            $s3BucketName: '%env(AWS_S3_BUCKET_NAME)%'
            $captchaKey: '%env(CAPTCHA_KEY)%'
            $captchaSecret: '%env(CAPTCHA_SECRET_KEY)%'
            $fcmServerKey: '%env(FCM_SERVER_KEY)%'
            $userRepository: '@sylius.repository.shop_user'

    _instanceof:
        Sylius\Bundle\ResourceBundle\Controller\ResourceController:
            autowire: false
        Sylius\Bundle\ResourceBundle\Form\Type\AbstractResourceType:
            autowire: false

    # Makes classes in src/ available to be used as services;
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # Controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']
        
    Sylius\Bundle\OrderBundle\Doctrine\ORM\OrderRepository:
        alias: 'sylius.repository.order'
        
    Sylius\Bundle\PromotionBundle\Doctrine\ORM\PromotionCouponRepository:
        alias: 'sylius.repository.promotion_coupon'
        
    Liip\ImagineBundle\Service\FilterService:
        alias: 'liip_imagine.service.filter'
        
    App\Menu\MenuBuilder:
        arguments: ["@knp_menu.factory"]
        tags:
            - { name: knp_menu.menu_builder, method: createSidebarMenu, alias: sidebar } # The alias is what is used to retrieve the menu
                
    twig.extension.intl:
        class: Twig_Extensions_Extension_Intl
        tags:
            - { name: twig.extension }

    App\EventSubscriber\ShopUserSubscriber:
        tags:
            - { name: doctrine.event_subscriber }
                
    App\EventSubscriber\OrderSubscriber:
        tags:
            - { name: doctrine.event_subscriber }

    app.factory.product.listview:
        class: App\Factory\Product\ListProductViewFactoryExtension
        decorates: sylius.shop_api_plugin.factory.list_product_view_factory
        arguments: ['@sylius.shop_api_plugin.factory.image_view_factory', '@sylius.shop_api_plugin.factory.product_view_factory', '@sylius.shop_api_plugin.factory.product_variant_view_factory']
        public: false

    app.service.token_generator.password_reset:
        class: App\Service\UniqueTokenGeneratorExtended
        decorates: sylius.shop_user.token_generator.password_reset
        arguments: ['@sylius.random_generator', '@sylius.shop_user.token_uniqueness_checker.password_reset', 10]
        public: false

    app.form.extension.type.customer_registration:
        class: App\Form\Extension\CustomerRegistrationTypeExtension
        tags:
            - { name: form.type_extension, extended_type: Sylius\Bundle\CoreBundle\Form\Type\Customer\CustomerRegistrationType }
    
    app.form.extension.type.customer_profile:
        class: App\Form\Extension\CustomerProfileTypeExtension
        tags:
            - { name: form.type_extension, extended_types: Sylius\Bundle\CustomerBundle\Form\Type\CustomerProfileType }
                
    app.form.extension.type.address:
        class: App\Form\Extension\AddressTypeExtension
        tags:
            - { name: form.type_extension, extended_type: Sylius\Bundle\AddressingBundle\Form\Type\AddressType }
                
    app.controller.shop.extender:
        class: App\Controller\Shop\ExtenderController
        tags: ['controller.service_arguments']
            
    Symfony\Component\Asset\Context\RequestStackContext: '@assets.context'
                
    Aws\S3\S3Client:
        arguments:
            -   version: '2006-03-01' # or 'latest'
                region: '%env(AWS_S3_REGION_ID)%' # 'eu-central-1' for example
                credentials:
                    key: '%env(AWS_S3_ACCESS_ID)%'
                    secret: '%env(AWS_S3_ACCESS_SECRET)%'
                    
    sensio_framework_extra.view.listener:
        alias: Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener
        
    App\EventListener\LoginListener:
        tags:
            - { name: 'kernel.event_listener', event: 'security.interactive_login' }
