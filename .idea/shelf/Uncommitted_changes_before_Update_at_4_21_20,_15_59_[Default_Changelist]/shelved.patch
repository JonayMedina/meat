Index: src/MessageHandler/PushNotificationMessageHandler.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\MessageHandler;\n\nuse App\\Entity\\Segment;\nuse App\\Service\\FCMService;\nuse App\\Entity\\PushNotification;\nuse App\\Message\\PushNotificationMessage;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse App\\Repository\\PushNotificationRepository;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Symfony\\Component\\Messenger\\Handler\\MessageHandlerInterface;\n\n/**\n * Class PushNotificationMessageHandler\n * @package App\\MessageHandler\n */\nclass PushNotificationMessageHandler implements MessageHandlerInterface\n{\n    const CHUNK_SIZE = 1000;\n\n    /**\n     * @var FCMService\n     */\n    private $fcmService;\n\n    /**\n     * @var EntityManagerInterface\n     */\n    private $entityManager;\n\n    /**\n     * @var PushNotificationRepository\n     */\n    private $repository;\n\n    /**\n     * @var ContainerInterface\n     */\n    private $container;\n\n    /**\n     * PushNotificationMessageHandler constructor.\n     * @param FCMService $FCMService\n     * @param EntityManagerInterface $entityManager\n     * @param PushNotificationRepository $repository\n     * @param ContainerInterface $container\n     */\n    public function __construct(FCMService $FCMService, EntityManagerInterface $entityManager, PushNotificationRepository $repository, ContainerInterface $container)\n    {\n        $this->fcmService = $FCMService;\n        $this->entityManager = $entityManager;\n        $this->repository = $repository;\n        $this->container = $container;\n    }\n\n    public function __invoke(PushNotificationMessage $message)\n    {\n        $response = [];\n        /** @var PushNotification $pushNotification */\n        $pushNotification = $this->repository->find($message->getPushId());\n        $chunks = array_chunk($this->getUsers($pushNotification), self::CHUNK_SIZE);\n\n        foreach ($chunks as $chunk) {\n            foreach ($chunk as $user) {\n                $response[] = $user . ': ' . $pushNotification->getTitle();\n            }\n        }\n\n        /**\n         * Mark as sent\n         */\n        $pushNotification->setSent(true);\n        $pushNotification->setResponse($response);\n\n        $this->entityManager->flush();\n    }\n\n    /**\n     * @param PushNotification $pushNotification\n     * @return array\n     */\n    private function getUsers(PushNotification $pushNotification)\n    {\n        $segment = $pushNotification->getSegment();\n\n        if (!$segment instanceof Segment) {\n            // TODO: Return all users.\n        }\n\n        $users = $this->getUsersBySegment($segment);\n\n        return ['Tokio', 'Profesor', 'Helsinki', 'Rio', 'Estocolmo', 'Nairobi', 'Berlín', 'Denver', 'Marsella', 'Moscú', 'Oslo'];\n    }\n\n    /**\n     * Return users by segment.\n     * @param Segment $segment\n     */\n    private function getUsersBySegment(Segment $segment)\n    {\n        $minAge = $segment->getMinAge();\n        $maxAge = $segment->getMaxAge();\n        $gender = $segment->getGender();\n        $frequencyType = $segment->getFrequencyType();\n        $fixedAmount = $segment->getFixedAmount();\n        $purchaseTimes = $segment->getPurchaseTimes();\n\n        // TODO: Make a working query...\n\n        /** @var QueryBuilder $queryBuilder */\n        $queryBuilder = $this->container->get('sylius.repository.shop_user')\n            ->createQueryBuilder('shop_user');\n\n        /**\n         * Age filter...\n         */\n        if ($minAge && $maxAge) {\n            // TODO: Create age filter\n        }\n\n        /**\n         * Gender filter...\n         */\n        if ($gender) {\n            if (count($gender) == 1) {\n                $queryBuilder\n                    ->andWhere('shop_user.gender = :gender')\n                    ->setParameter('gender', $gender[0]);\n            }\n        }\n\n        /**\n         * Monthly purchase times filter...\n         */\n        if ($frequencyType == Segment::TYPE_PURCHASE_TIMES) {\n            // TODO: Create monthly purchases filter...\n        }\n\n        /**\n         * Monthly fixed amount filter...\n         */\n        if ($frequencyType == Segment::TYPE_FIXED_AMOUNT) {\n            // TODO: Create monthly fixed amount filter...\n        }\n\n        $users = $queryBuilder\n            ->getQuery()\n            ->getResults();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/MessageHandler/PushNotificationMessageHandler.php	(revision 1024fc3be72e9622f17bdf96901ea3b3788e727d)
+++ src/MessageHandler/PushNotificationMessageHandler.php	(date 1587447327223)
@@ -2,6 +2,7 @@
 
 namespace App\MessageHandler;
 
+use App\Entity\Promotion\PromotionCoupon;
 use App\Entity\Segment;
 use App\Service\FCMService;
 use App\Entity\PushNotification;
@@ -62,6 +63,9 @@
         $pushNotification = $this->repository->find($message->getPushId());
         $chunks = array_chunk($this->getUsers($pushNotification), self::CHUNK_SIZE);
 
+        /** @var PromotionCoupon $coupon */
+        $coupon = $pushNotification->getPromotionCoupon();
+
         foreach ($chunks as $chunk) {
             foreach ($chunk as $user) {
                 $response[] = $user . ': ' . $pushNotification->getTitle();
Index: config/packages/sylius_resource.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># config/packages/sylius_resource.yaml\nsylius_resource:\n    resources:\n        app.terms_and_conditions:\n            driver: doctrine/orm # You can use also different driver here\n            classes:\n                model: App\\Entity\\TermsAndConditions\n                \n        app.about_store:\n            driver: doctrine/orm\n            classes:\n                model: App\\Entity\\AboutStore\n                \n        app.faq:\n            driver: doctrine/orm\n            classes:\n                model: App\\Entity\\FAQ\n                \n        app.location:\n            driver: doctrine/orm\n            classes:\n                model: App\\Entity\\Location\n                \n        app.holiday:\n            driver: doctrine/orm\n            classes:\n                model: App\\Entity\\Holiday\n                \n        app.segment:\n            driver: doctrine/orm\n            classes:\n                model: App\\Entity\\Segment\n                \n        app.push_notification:\n            driver: doctrine/orm\n            classes:\n                model: App\\Entity\\PushNotification\n                \n        app.favorite:\n            driver: doctrine/orm\n            classes:\n                model: App\\Entity\\Favorite\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config/packages/sylius_resource.yaml	(revision 1024fc3be72e9622f17bdf96901ea3b3788e727d)
+++ config/packages/sylius_resource.yaml	(date 1587506155585)
@@ -40,3 +40,8 @@
             driver: doctrine/orm
             classes:
                 model: App\Entity\Favorite
+                
+        app.shop_user_device:
+            driver: doctrine/orm
+            classes:
+                model: App\Entity\ShopUserDevice
Index: src/Migrations/Version20200421183055.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Migrations/Version20200421183055.php	(date 1587493856086)
+++ src/Migrations/Version20200421183055.php	(date 1587493856086)
@@ -0,0 +1,36 @@
+<?php
+
+declare(strict_types=1);
+
+namespace DoctrineMigrations;
+
+use Doctrine\DBAL\Schema\Schema;
+use Doctrine\Migrations\AbstractMigration;
+
+/**
+ * Auto-generated Migration: Please modify to your needs!
+ */
+final class Version20200421183055 extends AbstractMigration
+{
+    public function getDescription() : string
+    {
+        return '';
+    }
+
+    public function up(Schema $schema) : void
+    {
+        // this up() migration is auto-generated, please modify it to your needs
+        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \'mysql\'.');
+
+        $this->addSql('CREATE TABLE app_shop_user_device (id INT AUTO_INCREMENT NOT NULL, user_id INT NOT NULL, `key` VARCHAR(255) NOT NULL, type VARCHAR(100) NOT NULL, INDEX IDX_2A34BA02A76ED395 (user_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET UTF8 COLLATE `UTF8_unicode_ci` ENGINE = InnoDB');
+        $this->addSql('ALTER TABLE app_shop_user_device ADD CONSTRAINT FK_2A34BA02A76ED395 FOREIGN KEY (user_id) REFERENCES sylius_shop_user (id)');
+    }
+
+    public function down(Schema $schema) : void
+    {
+        // this down() migration is auto-generated, please modify it to your needs
+        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \'mysql\'.');
+
+        $this->addSql('DROP TABLE app_shop_user_device');
+    }
+}
Index: src/Entity/User/ShopUser.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\ndeclare(strict_types=1);\n\nnamespace App\\Entity\\User;\n\nuse App\\Entity\\Favorite;\nuse App\\Model\\BlameableTrait;\nuse App\\Model\\IpTraceableTrait;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Sylius\\Component\\Core\\Model\\ShopUser as BaseShopUser;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"sylius_shop_user\")\n */\nclass ShopUser extends BaseShopUser\n{\n    use BlameableTrait, IpTraceableTrait;\n\n    const ADDRESS_LIMIT = 3;\n\n    /**\n     * @ORM\\OneToMany(\n     *     targetEntity=\"App\\Entity\\Favorite\",\n     *     mappedBy=\"shopUser\"\n     * )\n     */\n    private $favorites;\n\n    /**\n     * @var \\DateTime\n     * @ORM\\Column(name=\"terms_and_conditions_accepted_at\", type=\"datetime\", nullable=true)\n     */\n    private $termsAndConditionsAcceptedAt;\n\n    public function __construct()\n    {\n        parent::__construct();\n        $this->favorites = new ArrayCollection();\n    }\n\n    /**\n     * @return \\DateTime\n     */\n    public function getTermsAndConditionsAcceptedAt(): \\DateTime\n    {\n        return $this->termsAndConditionsAcceptedAt;\n    }\n\n    /**\n     * @param \\DateTime $termsAndConditionsAcceptedAt\n     */\n    public function setTermsAndConditionsAcceptedAt(\\DateTime $termsAndConditionsAcceptedAt): void\n    {\n        $this->termsAndConditionsAcceptedAt = $termsAndConditionsAcceptedAt;\n    }\n\n    /**\n     * @return Collection|Favorite[]\n     */\n    public function getFavorites(): Collection\n    {\n        return $this->favorites;\n    }\n\n    public function addFavorite(Favorite $favorite): self\n    {\n        if (!$this->favorites->contains($favorite)) {\n            $this->favorites[] = $favorite;\n            $favorite->setShopUser($this);\n        }\n\n        return $this;\n    }\n\n    public function removeFavorite(Favorite $favorite): self\n    {\n        if ($this->favorites->contains($favorite)) {\n            $this->favorites->removeElement($favorite);\n            // set the owning side to null (unless already changed)\n            if ($favorite->getShopUser() === $this) {\n                $favorite->setShopUser(null);\n            }\n        }\n\n        return $this;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/User/ShopUser.php	(revision 1024fc3be72e9622f17bdf96901ea3b3788e727d)
+++ src/Entity/User/ShopUser.php	(date 1587493691495)
@@ -5,6 +5,7 @@
 namespace App\Entity\User;
 
 use App\Entity\Favorite;
+use App\Entity\ShopUserDevice;
 use App\Model\BlameableTrait;
 use App\Model\IpTraceableTrait;
 use Doctrine\ORM\Mapping as ORM;
@@ -36,10 +37,19 @@
      */
     private $termsAndConditionsAcceptedAt;
 
+    /**
+     * @ORM\OneToMany(
+     *     targetEntity="App\Entity\ShopUserDevice",
+     *     mappedBy="user"
+     * )
+     */
+    private $devices;
+
     public function __construct()
     {
         parent::__construct();
         $this->favorites = new ArrayCollection();
+        $this->devices = new ArrayCollection();
     }
 
     /**
@@ -86,6 +96,37 @@
             }
         }
 
+        return $this;
+    }
+
+    /**
+     * @return Collection|ShopUserDevice[]
+     */
+    public function getDevices(): Collection
+    {
+        return $this->devices;
+    }
+
+    public function addDevice(ShopUserDevice $device): self
+    {
+        if (!$this->devices->contains($device)) {
+            $this->devices[] = $device;
+            $device->setUser($this);
+        }
+
+        return $this;
+    }
+
+    public function removeDevice(ShopUserDevice $device): self
+    {
+        if ($this->devices->contains($device)) {
+            $this->devices->removeElement($device);
+            // set the owning side to null (unless already changed)
+            if ($device->getUser() === $this) {
+                $device->setUser(null);
+            }
+        }
+
         return $this;
     }
 }
Index: src/Entity/ShopUserDevice.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/ShopUserDevice.php	(date 1587506234954)
+++ src/Entity/ShopUserDevice.php	(date 1587506234954)
@@ -0,0 +1,127 @@
+<?php
+
+namespace App\Entity;
+
+use App\Entity\User\ShopUser;
+use Doctrine\ORM\Mapping as ORM;
+use Sylius\Component\Resource\Model\ResourceInterface;
+use Symfony\Component\Validator\Constraints as Assert;
+use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
+
+/**
+ * @ORM\Table(name="app_shop_user_device")
+ * @ORM\Entity(repositoryClass="App\Repository\ShopUserDeviceRepository")
+ */
+class ShopUserDevice implements ResourceInterface
+{
+    const TYPE_WEB = 'web';
+
+    const TYPE_ANDROID = 'android';
+
+    const TYPE_IOS = 'ios';
+
+    /**
+     * @ORM\Id()
+     * @ORM\GeneratedValue()
+     * @ORM\Column(type="integer")
+     */
+    private $id;
+
+    /**
+     * @var string
+     * @ORM\Column(type="string", length=255, nullable=false)
+     * @Assert\NotBlank()
+     */
+    private $key;
+
+    /**
+     * @var string
+     * @ORM\Column(type="string", length=100, nullable=false)
+     * @Assert\NotBlank()
+     */
+    private $type = self::TYPE_WEB;
+
+    /**
+     * @Assert\NotBlank()
+     * @ORM\ManyToOne(
+     *     targetEntity="App\Entity\User\ShopUser",
+     *     inversedBy="devices"
+     * )
+     * @ORM\JoinColumn(
+     *     name="user_id",
+     *     referencedColumnName="id",
+     *     nullable=false
+     * )
+     */
+    private $user;
+
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    /**
+     * @return string
+     */
+    public function getKey(): ?string
+    {
+        return $this->key;
+    }
+
+    /**
+     * @param string $key
+     * @return ShopUserDevice
+     */
+    public function setKey(?string $key): ShopUserDevice
+    {
+        $this->key = $key;
+
+        return $this;
+    }
+
+    /**
+     * @return string
+     */
+    public function getType(): ?string
+    {
+        return $this->type;
+    }
+
+    /**
+     * @param string $type
+     * @return ShopUserDevice
+     */
+    public function setType(?string $type): ShopUserDevice
+    {
+        if (!in_array($type, [
+            self::TYPE_WEB,
+            self::TYPE_ANDROID,
+            self::TYPE_IOS,
+        ])) {
+            throw new BadRequestHttpException('Bad type for user\'s device');
+        }
+
+        $this->type = $type;
+
+        return $this;
+    }
+
+    /**
+     * @return ShopUser|null
+     */
+    public function getUser(): ?ShopUser
+    {
+        return $this->user;
+    }
+
+    /**
+     * @param ShopUser|null $user
+     * @return $this
+     */
+    public function setUser(?ShopUser $user): self
+    {
+        $this->user = $user;
+
+        return $this;
+    }
+}
Index: src/Repository/ShopUserDeviceRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Repository/ShopUserDeviceRepository.php	(date 1587493210120)
+++ src/Repository/ShopUserDeviceRepository.php	(date 1587493210120)
@@ -0,0 +1,50 @@
+<?php
+
+namespace App\Repository;
+
+use App\Entity\ShopUserDevice;
+use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
+use Doctrine\Persistence\ManagerRegistry;
+
+/**
+ * @method ShopUserDevice|null find($id, $lockMode = null, $lockVersion = null)
+ * @method ShopUserDevice|null findOneBy(array $criteria, array $orderBy = null)
+ * @method ShopUserDevice[]    findAll()
+ * @method ShopUserDevice[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
+ */
+class ShopUserDeviceRepository extends ServiceEntityRepository
+{
+    public function __construct(ManagerRegistry $registry)
+    {
+        parent::__construct($registry, ShopUserDevice::class);
+    }
+
+    // /**
+    //  * @return ShopUserDevice[] Returns an array of ShopUserDevice objects
+    //  */
+    /*
+    public function findByExampleField($value)
+    {
+        return $this->createQueryBuilder('s')
+            ->andWhere('s.exampleField = :val')
+            ->setParameter('val', $value)
+            ->orderBy('s.id', 'ASC')
+            ->setMaxResults(10)
+            ->getQuery()
+            ->getResult()
+        ;
+    }
+    */
+
+    /*
+    public function findOneBySomeField($value): ?ShopUserDevice
+    {
+        return $this->createQueryBuilder('s')
+            ->andWhere('s.exampleField = :val')
+            ->setParameter('val', $value)
+            ->getQuery()
+            ->getOneOrNullResult()
+        ;
+    }
+    */
+}
